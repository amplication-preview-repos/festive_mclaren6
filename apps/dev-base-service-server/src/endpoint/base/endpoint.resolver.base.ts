/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Endpoint } from "./Endpoint";
import { EndpointCountArgs } from "./EndpointCountArgs";
import { EndpointFindManyArgs } from "./EndpointFindManyArgs";
import { Query } from "../../query/base/Query";
import { EndpointFindUniqueArgs } from "./EndpointFindUniqueArgs";
import { CreateEndpointArgs } from "./CreateEndpointArgs";
import { UpdateEndpointArgs } from "./UpdateEndpointArgs";
import { DeleteEndpointArgs } from "./DeleteEndpointArgs";
import { ApiDocumentationFindManyArgs } from "../../apiDocumentation/base/ApiDocumentationFindManyArgs";
import { ApiDocumentation } from "../../apiDocumentation/base/ApiDocumentation";
import { EndpointService } from "../endpoint.service";
@graphql.Resolver(() => Endpoint)
export class EndpointResolverBase {
  constructor(protected readonly service: EndpointService) {}

  async _endpointsMeta(
    @graphql.Args() args: EndpointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Endpoint])
  async endpoints(
    @graphql.Args() args: EndpointFindManyArgs
  ): Promise<Endpoint[]> {
    return this.service.endpoints(args);
  }

  @graphql.Query(() => Endpoint, { nullable: true })
  async endpoint(
    @graphql.Args() args: EndpointFindUniqueArgs
  ): Promise<Endpoint | null> {
    const result = await this.service.endpoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Endpoint)
  async createEndpoint(
    @graphql.Args() args: CreateEndpointArgs
  ): Promise<Endpoint> {
    return await this.service.createEndpoint({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Endpoint)
  async updateEndpoint(
    @graphql.Args() args: UpdateEndpointArgs
  ): Promise<Endpoint | null> {
    try {
      return await this.service.updateEndpoint({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Endpoint)
  async deleteEndpoint(
    @graphql.Args() args: DeleteEndpointArgs
  ): Promise<Endpoint | null> {
    try {
      return await this.service.deleteEndpoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ApiDocumentation], { name: "apiDocumentations" })
  async findApiDocumentations(
    @graphql.Parent() parent: Endpoint,
    @graphql.Args() args: ApiDocumentationFindManyArgs
  ): Promise<ApiDocumentation[]> {
    const results = await this.service.findApiDocumentations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
