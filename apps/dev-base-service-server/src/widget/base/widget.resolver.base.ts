/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Widget } from "./Widget";
import { WidgetCountArgs } from "./WidgetCountArgs";
import { WidgetFindManyArgs } from "./WidgetFindManyArgs";
import { Query } from "../../query/base/Query";
import { WidgetFindUniqueArgs } from "./WidgetFindUniqueArgs";
import { CreateWidgetArgs } from "./CreateWidgetArgs";
import { UpdateWidgetArgs } from "./UpdateWidgetArgs";
import { DeleteWidgetArgs } from "./DeleteWidgetArgs";
import { Dashboard } from "../../dashboard/base/Dashboard";
import { WidgetService } from "../widget.service";
@graphql.Resolver(() => Widget)
export class WidgetResolverBase {
  constructor(protected readonly service: WidgetService) {}

  async _widgetsMeta(
    @graphql.Args() args: WidgetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Widget])
  async widgets(@graphql.Args() args: WidgetFindManyArgs): Promise<Widget[]> {
    return this.service.widgets(args);
  }

  @graphql.Query(() => Widget, { nullable: true })
  async widget(
    @graphql.Args() args: WidgetFindUniqueArgs
  ): Promise<Widget | null> {
    const result = await this.service.widget(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Widget)
  async createWidget(@graphql.Args() args: CreateWidgetArgs): Promise<Widget> {
    return await this.service.createWidget({
      ...args,
      data: {
        ...args.data,

        dashboard: args.data.dashboard
          ? {
              connect: args.data.dashboard,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Widget)
  async updateWidget(
    @graphql.Args() args: UpdateWidgetArgs
  ): Promise<Widget | null> {
    try {
      return await this.service.updateWidget({
        ...args,
        data: {
          ...args.data,

          dashboard: args.data.dashboard
            ? {
                connect: args.data.dashboard,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Widget)
  async deleteWidget(
    @graphql.Args() args: DeleteWidgetArgs
  ): Promise<Widget | null> {
    try {
      return await this.service.deleteWidget(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Dashboard, {
    nullable: true,
    name: "dashboard",
  })
  async getDashboard(
    @graphql.Parent() parent: Widget
  ): Promise<Dashboard | null> {
    const result = await this.service.getDashboard(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
