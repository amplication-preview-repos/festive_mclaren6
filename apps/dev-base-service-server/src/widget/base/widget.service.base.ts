/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Widget as PrismaWidget,
  Dashboard as PrismaDashboard,
} from "@prisma/client";

export class WidgetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WidgetCountArgs, "select">): Promise<number> {
    return this.prisma.widget.count(args);
  }

  async widgets(args: Prisma.WidgetFindManyArgs): Promise<PrismaWidget[]> {
    return this.prisma.widget.findMany(args);
  }
  async widget(
    args: Prisma.WidgetFindUniqueArgs
  ): Promise<PrismaWidget | null> {
    return this.prisma.widget.findUnique(args);
  }
  async createWidget(args: Prisma.WidgetCreateArgs): Promise<PrismaWidget> {
    return this.prisma.widget.create(args);
  }
  async updateWidget(args: Prisma.WidgetUpdateArgs): Promise<PrismaWidget> {
    return this.prisma.widget.update(args);
  }
  async deleteWidget(args: Prisma.WidgetDeleteArgs): Promise<PrismaWidget> {
    return this.prisma.widget.delete(args);
  }

  async getDashboard(parentId: string): Promise<PrismaDashboard | null> {
    return this.prisma.widget
      .findUnique({
        where: { id: parentId },
      })
      .dashboard();
  }
}
