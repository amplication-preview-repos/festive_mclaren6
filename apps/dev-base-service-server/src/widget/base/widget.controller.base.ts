/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WidgetService } from "../widget.service";
import { WidgetCreateInput } from "./WidgetCreateInput";
import { Widget } from "./Widget";
import { WidgetFindManyArgs } from "./WidgetFindManyArgs";
import { WidgetWhereUniqueInput } from "./WidgetWhereUniqueInput";
import { WidgetUpdateInput } from "./WidgetUpdateInput";

export class WidgetControllerBase {
  constructor(protected readonly service: WidgetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Widget })
  async createWidget(@common.Body() data: WidgetCreateInput): Promise<Widget> {
    return await this.service.createWidget({
      data: {
        ...data,

        dashboard: data.dashboard
          ? {
              connect: data.dashboard,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        configField: true,
        position: true,

        dashboard: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Widget] })
  @ApiNestedQuery(WidgetFindManyArgs)
  async widgets(@common.Req() request: Request): Promise<Widget[]> {
    const args = plainToClass(WidgetFindManyArgs, request.query);
    return this.service.widgets({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        configField: true,
        position: true,

        dashboard: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Widget })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async widget(
    @common.Param() params: WidgetWhereUniqueInput
  ): Promise<Widget | null> {
    const result = await this.service.widget({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        configField: true,
        position: true,

        dashboard: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Widget })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWidget(
    @common.Param() params: WidgetWhereUniqueInput,
    @common.Body() data: WidgetUpdateInput
  ): Promise<Widget | null> {
    try {
      return await this.service.updateWidget({
        where: params,
        data: {
          ...data,

          dashboard: data.dashboard
            ? {
                connect: data.dashboard,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          configField: true,
          position: true,

          dashboard: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Widget })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWidget(
    @common.Param() params: WidgetWhereUniqueInput
  ): Promise<Widget | null> {
    try {
      return await this.service.deleteWidget({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          configField: true,
          position: true,

          dashboard: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
