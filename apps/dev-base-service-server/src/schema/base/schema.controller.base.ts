/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SchemaService } from "../schema.service";
import { SchemaCreateInput } from "./SchemaCreateInput";
import { Schema } from "./Schema";
import { SchemaFindManyArgs } from "./SchemaFindManyArgs";
import { SchemaWhereUniqueInput } from "./SchemaWhereUniqueInput";
import { SchemaUpdateInput } from "./SchemaUpdateInput";
import { FieldModelFindManyArgs } from "../../fieldModel/base/FieldModelFindManyArgs";
import { FieldModel } from "../../fieldModel/base/FieldModel";
import { FieldModelWhereUniqueInput } from "../../fieldModel/base/FieldModelWhereUniqueInput";

export class SchemaControllerBase {
  constructor(protected readonly service: SchemaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Schema })
  async createSchema(@common.Body() data: SchemaCreateInput): Promise<Schema> {
    return await this.service.createSchema({
      data: {
        ...data,

        collection: data.collection
          ? {
              connect: data.collection,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        version: true,
        definition: true,

        collection: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Schema] })
  @ApiNestedQuery(SchemaFindManyArgs)
  async schemata(@common.Req() request: Request): Promise<Schema[]> {
    const args = plainToClass(SchemaFindManyArgs, request.query);
    return this.service.schemata({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        version: true,
        definition: true,

        collection: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Schema })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async schema(
    @common.Param() params: SchemaWhereUniqueInput
  ): Promise<Schema | null> {
    const result = await this.service.schema({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        version: true,
        definition: true,

        collection: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Schema })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSchema(
    @common.Param() params: SchemaWhereUniqueInput,
    @common.Body() data: SchemaUpdateInput
  ): Promise<Schema | null> {
    try {
      return await this.service.updateSchema({
        where: params,
        data: {
          ...data,

          collection: data.collection
            ? {
                connect: data.collection,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          version: true,
          definition: true,

          collection: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Schema })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSchema(
    @common.Param() params: SchemaWhereUniqueInput
  ): Promise<Schema | null> {
    try {
      return await this.service.deleteSchema({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          version: true,
          definition: true,

          collection: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/fields")
  @ApiNestedQuery(FieldModelFindManyArgs)
  async findFields(
    @common.Req() request: Request,
    @common.Param() params: SchemaWhereUniqueInput
  ): Promise<FieldModel[]> {
    const query = plainToClass(FieldModelFindManyArgs, request.query);
    const results = await this.service.findFields(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        isRequired: true,
        defaultValue: true,
        constraints: true,

        schema: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fields")
  async connectFields(
    @common.Param() params: SchemaWhereUniqueInput,
    @common.Body() body: FieldModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fields: {
        connect: body,
      },
    };
    await this.service.updateSchema({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fields")
  async updateFields(
    @common.Param() params: SchemaWhereUniqueInput,
    @common.Body() body: FieldModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fields: {
        set: body,
      },
    };
    await this.service.updateSchema({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fields")
  async disconnectFields(
    @common.Param() params: SchemaWhereUniqueInput,
    @common.Body() body: FieldModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fields: {
        disconnect: body,
      },
    };
    await this.service.updateSchema({
      where: params,
      data,
      select: { id: true },
    });
  }
}
