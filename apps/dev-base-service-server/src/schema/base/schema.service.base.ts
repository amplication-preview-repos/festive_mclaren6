/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Schema as PrismaSchema,
  FieldModel as PrismaFieldModel,
  Collection as PrismaCollection,
} from "@prisma/client";

export class SchemaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SchemaCountArgs, "select">): Promise<number> {
    return this.prisma.schema.count(args);
  }

  async schemata(args: Prisma.SchemaFindManyArgs): Promise<PrismaSchema[]> {
    return this.prisma.schema.findMany(args);
  }
  async schema(
    args: Prisma.SchemaFindUniqueArgs
  ): Promise<PrismaSchema | null> {
    return this.prisma.schema.findUnique(args);
  }
  async createSchema(args: Prisma.SchemaCreateArgs): Promise<PrismaSchema> {
    return this.prisma.schema.create(args);
  }
  async updateSchema(args: Prisma.SchemaUpdateArgs): Promise<PrismaSchema> {
    return this.prisma.schema.update(args);
  }
  async deleteSchema(args: Prisma.SchemaDeleteArgs): Promise<PrismaSchema> {
    return this.prisma.schema.delete(args);
  }

  async findFields(
    parentId: string,
    args: Prisma.FieldModelFindManyArgs
  ): Promise<PrismaFieldModel[]> {
    return this.prisma.schema
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .fields(args);
  }

  async getCollection(parentId: string): Promise<PrismaCollection | null> {
    return this.prisma.schema
      .findUnique({
        where: { id: parentId },
      })
      .collection();
  }
}
