/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollectionService } from "../collection.service";
import { CollectionCreateInput } from "./CollectionCreateInput";
import { Collection } from "./Collection";
import { CollectionFindManyArgs } from "./CollectionFindManyArgs";
import { CollectionWhereUniqueInput } from "./CollectionWhereUniqueInput";
import { CollectionUpdateInput } from "./CollectionUpdateInput";
import { IndexFindManyArgs } from "../../index/base/IndexFindManyArgs";
import { Index } from "../../index/base/Index";
import { IndexWhereUniqueInput } from "../../index/base/IndexWhereUniqueInput";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { DocumentWhereUniqueInput } from "../../document/base/DocumentWhereUniqueInput";
import { SchemaFindManyArgs } from "../../schema/base/SchemaFindManyArgs";
import { Schema } from "../../schema/base/Schema";
import { SchemaWhereUniqueInput } from "../../schema/base/SchemaWhereUniqueInput";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";
import { AnalyticsEventFindManyArgs } from "../../analyticsEvent/base/AnalyticsEventFindManyArgs";
import { AnalyticsEvent } from "../../analyticsEvent/base/AnalyticsEvent";
import { AnalyticsEventWhereUniqueInput } from "../../analyticsEvent/base/AnalyticsEventWhereUniqueInput";

export class CollectionControllerBase {
  constructor(protected readonly service: CollectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Collection })
  async createCollection(
    @common.Body() data: CollectionCreateInput
  ): Promise<Collection> {
    return await this.service.createCollection({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        schema: true,
        isSchemaless: true,
        version: true,
        isPublic: true,
        owner: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Collection] })
  @ApiNestedQuery(CollectionFindManyArgs)
  async collections(@common.Req() request: Request): Promise<Collection[]> {
    const args = plainToClass(CollectionFindManyArgs, request.query);
    return this.service.collections({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        schema: true,
        isSchemaless: true,
        version: true,
        isPublic: true,
        owner: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Collection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collection(
    @common.Param() params: CollectionWhereUniqueInput
  ): Promise<Collection | null> {
    const result = await this.service.collection({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        schema: true,
        isSchemaless: true,
        version: true,
        isPublic: true,
        owner: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Collection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollection(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() data: CollectionUpdateInput
  ): Promise<Collection | null> {
    try {
      return await this.service.updateCollection({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          schema: true,
          isSchemaless: true,
          version: true,
          isPublic: true,
          owner: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Collection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollection(
    @common.Param() params: CollectionWhereUniqueInput
  ): Promise<Collection | null> {
    try {
      return await this.service.deleteCollection({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          schema: true,
          isSchemaless: true,
          version: true,
          isPublic: true,
          owner: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/indices")
  @ApiNestedQuery(IndexFindManyArgs)
  async findIndices(
    @common.Req() request: Request,
    @common.Param() params: CollectionWhereUniqueInput
  ): Promise<Index[]> {
    const query = plainToClass(IndexFindManyArgs, request.query);
    const results = await this.service.findIndices(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        fields: true,
        isUnique: true,

        collection: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/indices")
  async connectIndices(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: IndexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      indices: {
        connect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/indices")
  async updateIndices(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: IndexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      indices: {
        set: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/indices")
  async disconnectIndices(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: IndexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      indices: {
        disconnect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/documents")
  @ApiNestedQuery(DocumentFindManyArgs)
  async findDocuments(
    @common.Req() request: Request,
    @common.Param() params: CollectionWhereUniqueInput
  ): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findDocuments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        data: true,
        version: true,
        createdBy: true,

        collection: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/documents")
  async connectDocuments(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        connect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documents")
  async updateDocuments(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        set: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documents")
  async disconnectDocuments(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        disconnect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/schemata")
  @ApiNestedQuery(SchemaFindManyArgs)
  async findSchemata(
    @common.Req() request: Request,
    @common.Param() params: CollectionWhereUniqueInput
  ): Promise<Schema[]> {
    const query = plainToClass(SchemaFindManyArgs, request.query);
    const results = await this.service.findSchemata(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        version: true,
        definition: true,

        collection: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/schemata")
  async connectSchemata(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: SchemaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schemata: {
        connect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/schemata")
  async updateSchemata(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: SchemaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schemata: {
        set: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/schemata")
  async disconnectSchemata(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: SchemaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schemata: {
        disconnect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/subscriptions")
  @ApiNestedQuery(SubscriptionFindManyArgs)
  async findSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: CollectionWhereUniqueInput
  ): Promise<Subscription[]> {
    const query = plainToClass(SubscriptionFindManyArgs, request.query);
    const results = await this.service.findSubscriptions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        event: true,

        user: {
          select: {
            id: true,
          },
        },

        collection: {
          select: {
            id: true,
          },
        },

        query: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subscriptions")
  async connectSubscriptions(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        connect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subscriptions")
  async updateSubscriptions(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        set: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subscriptions")
  async disconnectSubscriptions(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/analyticsEvents")
  @ApiNestedQuery(AnalyticsEventFindManyArgs)
  async findAnalyticsEvents(
    @common.Req() request: Request,
    @common.Param() params: CollectionWhereUniqueInput
  ): Promise<AnalyticsEvent[]> {
    const query = plainToClass(AnalyticsEventFindManyArgs, request.query);
    const results = await this.service.findAnalyticsEvents(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        eventData: true,
        timestamp: true,
        context: true,

        user: {
          select: {
            id: true,
          },
        },

        collection: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/analyticsEvents")
  async connectAnalyticsEvents(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: AnalyticsEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsEvents: {
        connect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/analyticsEvents")
  async updateAnalyticsEvents(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: AnalyticsEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsEvents: {
        set: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/analyticsEvents")
  async disconnectAnalyticsEvents(
    @common.Param() params: CollectionWhereUniqueInput,
    @common.Body() body: AnalyticsEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsEvents: {
        disconnect: body,
      },
    };
    await this.service.updateCollection({
      where: params,
      data,
      select: { id: true },
    });
  }
}
