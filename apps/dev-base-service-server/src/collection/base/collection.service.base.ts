/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Collection as PrismaCollection,
  Index as PrismaIndex,
  Document as PrismaDocument,
  Schema as PrismaSchema,
  Subscription as PrismaSubscription,
  AnalyticsEvent as PrismaAnalyticsEvent,
} from "@prisma/client";

export class CollectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CollectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.collection.count(args);
  }

  async collections(
    args: Prisma.CollectionFindManyArgs
  ): Promise<PrismaCollection[]> {
    return this.prisma.collection.findMany(args);
  }
  async collection(
    args: Prisma.CollectionFindUniqueArgs
  ): Promise<PrismaCollection | null> {
    return this.prisma.collection.findUnique(args);
  }
  async createCollection(
    args: Prisma.CollectionCreateArgs
  ): Promise<PrismaCollection> {
    return this.prisma.collection.create(args);
  }
  async updateCollection(
    args: Prisma.CollectionUpdateArgs
  ): Promise<PrismaCollection> {
    return this.prisma.collection.update(args);
  }
  async deleteCollection(
    args: Prisma.CollectionDeleteArgs
  ): Promise<PrismaCollection> {
    return this.prisma.collection.delete(args);
  }

  async findIndices(
    parentId: string,
    args: Prisma.IndexFindManyArgs
  ): Promise<PrismaIndex[]> {
    return this.prisma.collection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .indices(args);
  }

  async findDocuments(
    parentId: string,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.collection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }

  async findSchemata(
    parentId: string,
    args: Prisma.SchemaFindManyArgs
  ): Promise<PrismaSchema[]> {
    return this.prisma.collection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .schemata(args);
  }

  async findSubscriptions(
    parentId: string,
    args: Prisma.SubscriptionFindManyArgs
  ): Promise<PrismaSubscription[]> {
    return this.prisma.collection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subscriptions(args);
  }

  async findAnalyticsEvents(
    parentId: string,
    args: Prisma.AnalyticsEventFindManyArgs
  ): Promise<PrismaAnalyticsEvent[]> {
    return this.prisma.collection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .analyticsEvents(args);
  }
}
