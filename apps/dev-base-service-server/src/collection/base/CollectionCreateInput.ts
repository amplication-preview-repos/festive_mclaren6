/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  IsBoolean,
  IsInt,
  Min,
  Max,
  ValidateNested,
} from "class-validator";

import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { IndexCreateNestedManyWithoutCollectionsInput } from "./IndexCreateNestedManyWithoutCollectionsInput";
import { Type } from "class-transformer";
import { DocumentCreateNestedManyWithoutCollectionsInput } from "./DocumentCreateNestedManyWithoutCollectionsInput";
import { SchemaCreateNestedManyWithoutCollectionsInput } from "./SchemaCreateNestedManyWithoutCollectionsInput";
import { SubscriptionCreateNestedManyWithoutCollectionsInput } from "./SubscriptionCreateNestedManyWithoutCollectionsInput";
import { AnalyticsEventCreateNestedManyWithoutCollectionsInput } from "./AnalyticsEventCreateNestedManyWithoutCollectionsInput";

@InputType()
class CollectionCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  schema?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isSchemaless?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  version?: number | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPublic?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => IndexCreateNestedManyWithoutCollectionsInput,
  })
  @ValidateNested()
  @Type(() => IndexCreateNestedManyWithoutCollectionsInput)
  @IsOptional()
  @Field(() => IndexCreateNestedManyWithoutCollectionsInput, {
    nullable: true,
  })
  indices?: IndexCreateNestedManyWithoutCollectionsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  owner?: string | null;

  @ApiProperty({
    required: false,
    type: () => DocumentCreateNestedManyWithoutCollectionsInput,
  })
  @ValidateNested()
  @Type(() => DocumentCreateNestedManyWithoutCollectionsInput)
  @IsOptional()
  @Field(() => DocumentCreateNestedManyWithoutCollectionsInput, {
    nullable: true,
  })
  documents?: DocumentCreateNestedManyWithoutCollectionsInput;

  @ApiProperty({
    required: false,
    type: () => SchemaCreateNestedManyWithoutCollectionsInput,
  })
  @ValidateNested()
  @Type(() => SchemaCreateNestedManyWithoutCollectionsInput)
  @IsOptional()
  @Field(() => SchemaCreateNestedManyWithoutCollectionsInput, {
    nullable: true,
  })
  schemata?: SchemaCreateNestedManyWithoutCollectionsInput;

  @ApiProperty({
    required: false,
    type: () => SubscriptionCreateNestedManyWithoutCollectionsInput,
  })
  @ValidateNested()
  @Type(() => SubscriptionCreateNestedManyWithoutCollectionsInput)
  @IsOptional()
  @Field(() => SubscriptionCreateNestedManyWithoutCollectionsInput, {
    nullable: true,
  })
  subscriptions?: SubscriptionCreateNestedManyWithoutCollectionsInput;

  @ApiProperty({
    required: false,
    type: () => AnalyticsEventCreateNestedManyWithoutCollectionsInput,
  })
  @ValidateNested()
  @Type(() => AnalyticsEventCreateNestedManyWithoutCollectionsInput)
  @IsOptional()
  @Field(() => AnalyticsEventCreateNestedManyWithoutCollectionsInput, {
    nullable: true,
  })
  analyticsEvents?: AnalyticsEventCreateNestedManyWithoutCollectionsInput;
}

export { CollectionCreateInput as CollectionCreateInput };
