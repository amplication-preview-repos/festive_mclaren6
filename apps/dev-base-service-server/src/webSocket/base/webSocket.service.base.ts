/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WebSocket as PrismaWebSocket,
  User as PrismaUser,
} from "@prisma/client";

export class WebSocketServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WebSocketCountArgs, "select">
  ): Promise<number> {
    return this.prisma.webSocket.count(args);
  }

  async webSockets(
    args: Prisma.WebSocketFindManyArgs
  ): Promise<PrismaWebSocket[]> {
    return this.prisma.webSocket.findMany(args);
  }
  async webSocket(
    args: Prisma.WebSocketFindUniqueArgs
  ): Promise<PrismaWebSocket | null> {
    return this.prisma.webSocket.findUnique(args);
  }
  async createWebSocket(
    args: Prisma.WebSocketCreateArgs
  ): Promise<PrismaWebSocket> {
    return this.prisma.webSocket.create(args);
  }
  async updateWebSocket(
    args: Prisma.WebSocketUpdateArgs
  ): Promise<PrismaWebSocket> {
    return this.prisma.webSocket.update(args);
  }
  async deleteWebSocket(
    args: Prisma.WebSocketDeleteArgs
  ): Promise<PrismaWebSocket> {
    return this.prisma.webSocket.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.webSocket
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
