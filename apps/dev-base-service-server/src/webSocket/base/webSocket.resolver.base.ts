/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WebSocket } from "./WebSocket";
import { WebSocketCountArgs } from "./WebSocketCountArgs";
import { WebSocketFindManyArgs } from "./WebSocketFindManyArgs";
import { Query } from "../../query/base/Query";
import { WebSocketFindUniqueArgs } from "./WebSocketFindUniqueArgs";
import { CreateWebSocketArgs } from "./CreateWebSocketArgs";
import { UpdateWebSocketArgs } from "./UpdateWebSocketArgs";
import { DeleteWebSocketArgs } from "./DeleteWebSocketArgs";
import { User } from "../../user/base/User";
import { WebSocketService } from "../webSocket.service";
@graphql.Resolver(() => WebSocket)
export class WebSocketResolverBase {
  constructor(protected readonly service: WebSocketService) {}

  async _webSocketsMeta(
    @graphql.Args() args: WebSocketCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebSocket])
  async webSockets(
    @graphql.Args() args: WebSocketFindManyArgs
  ): Promise<WebSocket[]> {
    return this.service.webSockets(args);
  }

  @graphql.Query(() => WebSocket, { nullable: true })
  async webSocket(
    @graphql.Args() args: WebSocketFindUniqueArgs
  ): Promise<WebSocket | null> {
    const result = await this.service.webSocket(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebSocket)
  async createWebSocket(
    @graphql.Args() args: CreateWebSocketArgs
  ): Promise<WebSocket> {
    return await this.service.createWebSocket({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => WebSocket)
  async updateWebSocket(
    @graphql.Args() args: UpdateWebSocketArgs
  ): Promise<WebSocket | null> {
    try {
      return await this.service.updateWebSocket({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebSocket)
  async deleteWebSocket(
    @graphql.Args() args: DeleteWebSocketArgs
  ): Promise<WebSocket | null> {
    try {
      return await this.service.deleteWebSocket(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: WebSocket): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
