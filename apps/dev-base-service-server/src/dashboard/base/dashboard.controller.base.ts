/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DashboardService } from "../dashboard.service";
import { DashboardCreateInput } from "./DashboardCreateInput";
import { Dashboard } from "./Dashboard";
import { DashboardFindManyArgs } from "./DashboardFindManyArgs";
import { DashboardWhereUniqueInput } from "./DashboardWhereUniqueInput";
import { DashboardUpdateInput } from "./DashboardUpdateInput";
import { WidgetFindManyArgs } from "../../widget/base/WidgetFindManyArgs";
import { Widget } from "../../widget/base/Widget";
import { WidgetWhereUniqueInput } from "../../widget/base/WidgetWhereUniqueInput";

export class DashboardControllerBase {
  constructor(protected readonly service: DashboardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dashboard })
  async createDashboard(
    @common.Body() data: DashboardCreateInput
  ): Promise<Dashboard> {
    return await this.service.createDashboard({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        layout: true,
        isPublic: true,
        owner: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dashboard] })
  @ApiNestedQuery(DashboardFindManyArgs)
  async dashboards(@common.Req() request: Request): Promise<Dashboard[]> {
    const args = plainToClass(DashboardFindManyArgs, request.query);
    return this.service.dashboards({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        layout: true,
        isPublic: true,
        owner: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dashboard(
    @common.Param() params: DashboardWhereUniqueInput
  ): Promise<Dashboard | null> {
    const result = await this.service.dashboard({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        layout: true,
        isPublic: true,
        owner: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDashboard(
    @common.Param() params: DashboardWhereUniqueInput,
    @common.Body() data: DashboardUpdateInput
  ): Promise<Dashboard | null> {
    try {
      return await this.service.updateDashboard({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          layout: true,
          isPublic: true,
          owner: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDashboard(
    @common.Param() params: DashboardWhereUniqueInput
  ): Promise<Dashboard | null> {
    try {
      return await this.service.deleteDashboard({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          layout: true,
          isPublic: true,
          owner: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/widgets")
  @ApiNestedQuery(WidgetFindManyArgs)
  async findWidgets(
    @common.Req() request: Request,
    @common.Param() params: DashboardWhereUniqueInput
  ): Promise<Widget[]> {
    const query = plainToClass(WidgetFindManyArgs, request.query);
    const results = await this.service.findWidgets(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        configField: true,
        position: true,

        dashboard: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/widgets")
  async connectWidgets(
    @common.Param() params: DashboardWhereUniqueInput,
    @common.Body() body: WidgetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      widgets: {
        connect: body,
      },
    };
    await this.service.updateDashboard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/widgets")
  async updateWidgets(
    @common.Param() params: DashboardWhereUniqueInput,
    @common.Body() body: WidgetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      widgets: {
        set: body,
      },
    };
    await this.service.updateDashboard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/widgets")
  async disconnectWidgets(
    @common.Param() params: DashboardWhereUniqueInput,
    @common.Body() body: WidgetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      widgets: {
        disconnect: body,
      },
    };
    await this.service.updateDashboard({
      where: params,
      data,
      select: { id: true },
    });
  }
}
