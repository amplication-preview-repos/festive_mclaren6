/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApiDocumentation } from "./ApiDocumentation";
import { ApiDocumentationCountArgs } from "./ApiDocumentationCountArgs";
import { ApiDocumentationFindManyArgs } from "./ApiDocumentationFindManyArgs";
import { Query } from "../../query/base/Query";
import { ApiDocumentationFindUniqueArgs } from "./ApiDocumentationFindUniqueArgs";
import { CreateApiDocumentationArgs } from "./CreateApiDocumentationArgs";
import { UpdateApiDocumentationArgs } from "./UpdateApiDocumentationArgs";
import { DeleteApiDocumentationArgs } from "./DeleteApiDocumentationArgs";
import { Endpoint } from "../../endpoint/base/Endpoint";
import { ApiDocumentationService } from "../apiDocumentation.service";
@graphql.Resolver(() => ApiDocumentation)
export class ApiDocumentationResolverBase {
  constructor(protected readonly service: ApiDocumentationService) {}

  async _apiDocumentationsMeta(
    @graphql.Args() args: ApiDocumentationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApiDocumentation])
  async apiDocumentations(
    @graphql.Args() args: ApiDocumentationFindManyArgs
  ): Promise<ApiDocumentation[]> {
    return this.service.apiDocumentations(args);
  }

  @graphql.Query(() => ApiDocumentation, { nullable: true })
  async apiDocumentation(
    @graphql.Args() args: ApiDocumentationFindUniqueArgs
  ): Promise<ApiDocumentation | null> {
    const result = await this.service.apiDocumentation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApiDocumentation)
  async createApiDocumentation(
    @graphql.Args() args: CreateApiDocumentationArgs
  ): Promise<ApiDocumentation> {
    return await this.service.createApiDocumentation({
      ...args,
      data: {
        ...args.data,

        endpoint: args.data.endpoint
          ? {
              connect: args.data.endpoint,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ApiDocumentation)
  async updateApiDocumentation(
    @graphql.Args() args: UpdateApiDocumentationArgs
  ): Promise<ApiDocumentation | null> {
    try {
      return await this.service.updateApiDocumentation({
        ...args,
        data: {
          ...args.data,

          endpoint: args.data.endpoint
            ? {
                connect: args.data.endpoint,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApiDocumentation)
  async deleteApiDocumentation(
    @graphql.Args() args: DeleteApiDocumentationArgs
  ): Promise<ApiDocumentation | null> {
    try {
      return await this.service.deleteApiDocumentation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Endpoint, {
    nullable: true,
    name: "endpoint",
  })
  async getEndpoint(
    @graphql.Parent() parent: ApiDocumentation
  ): Promise<Endpoint | null> {
    const result = await this.service.getEndpoint(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
