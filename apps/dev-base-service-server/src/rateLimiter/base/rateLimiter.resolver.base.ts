/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RateLimiter } from "./RateLimiter";
import { RateLimiterCountArgs } from "./RateLimiterCountArgs";
import { RateLimiterFindManyArgs } from "./RateLimiterFindManyArgs";
import { Query } from "../../query/base/Query";
import { RateLimiterFindUniqueArgs } from "./RateLimiterFindUniqueArgs";
import { CreateRateLimiterArgs } from "./CreateRateLimiterArgs";
import { UpdateRateLimiterArgs } from "./UpdateRateLimiterArgs";
import { DeleteRateLimiterArgs } from "./DeleteRateLimiterArgs";
import { RateLimiterService } from "../rateLimiter.service";
@graphql.Resolver(() => RateLimiter)
export class RateLimiterResolverBase {
  constructor(protected readonly service: RateLimiterService) {}

  async _rateLimitersMeta(
    @graphql.Args() args: RateLimiterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RateLimiter])
  async rateLimiters(
    @graphql.Args() args: RateLimiterFindManyArgs
  ): Promise<RateLimiter[]> {
    return this.service.rateLimiters(args);
  }

  @graphql.Query(() => RateLimiter, { nullable: true })
  async rateLimiter(
    @graphql.Args() args: RateLimiterFindUniqueArgs
  ): Promise<RateLimiter | null> {
    const result = await this.service.rateLimiter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RateLimiter)
  async createRateLimiter(
    @graphql.Args() args: CreateRateLimiterArgs
  ): Promise<RateLimiter> {
    return await this.service.createRateLimiter({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RateLimiter)
  async updateRateLimiter(
    @graphql.Args() args: UpdateRateLimiterArgs
  ): Promise<RateLimiter | null> {
    try {
      return await this.service.updateRateLimiter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RateLimiter)
  async deleteRateLimiter(
    @graphql.Args() args: DeleteRateLimiterArgs
  ): Promise<RateLimiter | null> {
    try {
      return await this.service.deleteRateLimiter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
