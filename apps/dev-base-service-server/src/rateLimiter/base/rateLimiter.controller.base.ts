/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RateLimiterService } from "../rateLimiter.service";
import { RateLimiterCreateInput } from "./RateLimiterCreateInput";
import { RateLimiter } from "./RateLimiter";
import { RateLimiterFindManyArgs } from "./RateLimiterFindManyArgs";
import { RateLimiterWhereUniqueInput } from "./RateLimiterWhereUniqueInput";
import { RateLimiterUpdateInput } from "./RateLimiterUpdateInput";

export class RateLimiterControllerBase {
  constructor(protected readonly service: RateLimiterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RateLimiter })
  async createRateLimiter(
    @common.Body() data: RateLimiterCreateInput
  ): Promise<RateLimiter> {
    return await this.service.createRateLimiter({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        resourceType: true,
        resource: true,
        limit: true,
        window: true,
        current: true,
        lastReset: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RateLimiter] })
  @ApiNestedQuery(RateLimiterFindManyArgs)
  async rateLimiters(@common.Req() request: Request): Promise<RateLimiter[]> {
    const args = plainToClass(RateLimiterFindManyArgs, request.query);
    return this.service.rateLimiters({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        resourceType: true,
        resource: true,
        limit: true,
        window: true,
        current: true,
        lastReset: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RateLimiter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rateLimiter(
    @common.Param() params: RateLimiterWhereUniqueInput
  ): Promise<RateLimiter | null> {
    const result = await this.service.rateLimiter({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        resourceType: true,
        resource: true,
        limit: true,
        window: true,
        current: true,
        lastReset: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RateLimiter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRateLimiter(
    @common.Param() params: RateLimiterWhereUniqueInput,
    @common.Body() data: RateLimiterUpdateInput
  ): Promise<RateLimiter | null> {
    try {
      return await this.service.updateRateLimiter({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          resourceType: true,
          resource: true,
          limit: true,
          window: true,
          current: true,
          lastReset: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RateLimiter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRateLimiter(
    @common.Param() params: RateLimiterWhereUniqueInput
  ): Promise<RateLimiter | null> {
    try {
      return await this.service.deleteRateLimiter({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          resourceType: true,
          resource: true,
          limit: true,
          window: true,
          current: true,
          lastReset: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
