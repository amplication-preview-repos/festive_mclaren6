/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RateLimiter as PrismaRateLimiter } from "@prisma/client";

export class RateLimiterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RateLimiterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rateLimiter.count(args);
  }

  async rateLimiters(
    args: Prisma.RateLimiterFindManyArgs
  ): Promise<PrismaRateLimiter[]> {
    return this.prisma.rateLimiter.findMany(args);
  }
  async rateLimiter(
    args: Prisma.RateLimiterFindUniqueArgs
  ): Promise<PrismaRateLimiter | null> {
    return this.prisma.rateLimiter.findUnique(args);
  }
  async createRateLimiter(
    args: Prisma.RateLimiterCreateArgs
  ): Promise<PrismaRateLimiter> {
    return this.prisma.rateLimiter.create(args);
  }
  async updateRateLimiter(
    args: Prisma.RateLimiterUpdateArgs
  ): Promise<PrismaRateLimiter> {
    return this.prisma.rateLimiter.update(args);
  }
  async deleteRateLimiter(
    args: Prisma.RateLimiterDeleteArgs
  ): Promise<PrismaRateLimiter> {
    return this.prisma.rateLimiter.delete(args);
  }
}
