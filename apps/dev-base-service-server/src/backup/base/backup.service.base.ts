/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Backup as PrismaBackup,
  RestorePoint as PrismaRestorePoint,
} from "@prisma/client";

export class BackupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BackupCountArgs, "select">): Promise<number> {
    return this.prisma.backup.count(args);
  }

  async backups(args: Prisma.BackupFindManyArgs): Promise<PrismaBackup[]> {
    return this.prisma.backup.findMany(args);
  }
  async backup(
    args: Prisma.BackupFindUniqueArgs
  ): Promise<PrismaBackup | null> {
    return this.prisma.backup.findUnique(args);
  }
  async createBackup(args: Prisma.BackupCreateArgs): Promise<PrismaBackup> {
    return this.prisma.backup.create(args);
  }
  async updateBackup(args: Prisma.BackupUpdateArgs): Promise<PrismaBackup> {
    return this.prisma.backup.update(args);
  }
  async deleteBackup(args: Prisma.BackupDeleteArgs): Promise<PrismaBackup> {
    return this.prisma.backup.delete(args);
  }

  async findRestorePoints(
    parentId: string,
    args: Prisma.RestorePointFindManyArgs
  ): Promise<PrismaRestorePoint[]> {
    return this.prisma.backup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .restorePoints(args);
  }
}
