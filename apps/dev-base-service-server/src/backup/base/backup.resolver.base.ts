/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Backup } from "./Backup";
import { BackupCountArgs } from "./BackupCountArgs";
import { BackupFindManyArgs } from "./BackupFindManyArgs";
import { Query } from "../../query/base/Query";
import { BackupFindUniqueArgs } from "./BackupFindUniqueArgs";
import { CreateBackupArgs } from "./CreateBackupArgs";
import { UpdateBackupArgs } from "./UpdateBackupArgs";
import { DeleteBackupArgs } from "./DeleteBackupArgs";
import { RestorePointFindManyArgs } from "../../restorePoint/base/RestorePointFindManyArgs";
import { RestorePoint } from "../../restorePoint/base/RestorePoint";
import { BackupService } from "../backup.service";
@graphql.Resolver(() => Backup)
export class BackupResolverBase {
  constructor(protected readonly service: BackupService) {}

  async _backupsMeta(
    @graphql.Args() args: BackupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Backup])
  async backups(@graphql.Args() args: BackupFindManyArgs): Promise<Backup[]> {
    return this.service.backups(args);
  }

  @graphql.Query(() => Backup, { nullable: true })
  async backup(
    @graphql.Args() args: BackupFindUniqueArgs
  ): Promise<Backup | null> {
    const result = await this.service.backup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Backup)
  async createBackup(@graphql.Args() args: CreateBackupArgs): Promise<Backup> {
    return await this.service.createBackup({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Backup)
  async updateBackup(
    @graphql.Args() args: UpdateBackupArgs
  ): Promise<Backup | null> {
    try {
      return await this.service.updateBackup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Backup)
  async deleteBackup(
    @graphql.Args() args: DeleteBackupArgs
  ): Promise<Backup | null> {
    try {
      return await this.service.deleteBackup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [RestorePoint], { name: "restorePoints" })
  async findRestorePoints(
    @graphql.Parent() parent: Backup,
    @graphql.Args() args: RestorePointFindManyArgs
  ): Promise<RestorePoint[]> {
    const results = await this.service.findRestorePoints(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
