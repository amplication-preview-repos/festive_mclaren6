/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RestorePointService } from "../restorePoint.service";
import { RestorePointCreateInput } from "./RestorePointCreateInput";
import { RestorePoint } from "./RestorePoint";
import { RestorePointFindManyArgs } from "./RestorePointFindManyArgs";
import { RestorePointWhereUniqueInput } from "./RestorePointWhereUniqueInput";
import { RestorePointUpdateInput } from "./RestorePointUpdateInput";

export class RestorePointControllerBase {
  constructor(protected readonly service: RestorePointService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RestorePoint })
  async createRestorePoint(
    @common.Body() data: RestorePointCreateInput
  ): Promise<RestorePoint> {
    return await this.service.createRestorePoint({
      data: {
        ...data,

        backup: data.backup
          ? {
              connect: data.backup,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,

        backup: {
          select: {
            id: true,
          },
        },

        status: true,
        endTime: true,
        restoredBy: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RestorePoint] })
  @ApiNestedQuery(RestorePointFindManyArgs)
  async restorePoints(@common.Req() request: Request): Promise<RestorePoint[]> {
    const args = plainToClass(RestorePointFindManyArgs, request.query);
    return this.service.restorePoints({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,

        backup: {
          select: {
            id: true,
          },
        },

        status: true,
        endTime: true,
        restoredBy: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RestorePoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async restorePoint(
    @common.Param() params: RestorePointWhereUniqueInput
  ): Promise<RestorePoint | null> {
    const result = await this.service.restorePoint({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,

        backup: {
          select: {
            id: true,
          },
        },

        status: true,
        endTime: true,
        restoredBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RestorePoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRestorePoint(
    @common.Param() params: RestorePointWhereUniqueInput,
    @common.Body() data: RestorePointUpdateInput
  ): Promise<RestorePoint | null> {
    try {
      return await this.service.updateRestorePoint({
        where: params,
        data: {
          ...data,

          backup: data.backup
            ? {
                connect: data.backup,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,

          backup: {
            select: {
              id: true,
            },
          },

          status: true,
          endTime: true,
          restoredBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RestorePoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRestorePoint(
    @common.Param() params: RestorePointWhereUniqueInput
  ): Promise<RestorePoint | null> {
    try {
      return await this.service.deleteRestorePoint({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,

          backup: {
            select: {
              id: true,
            },
          },

          status: true,
          endTime: true,
          restoredBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
