/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RestorePoint as PrismaRestorePoint,
  Backup as PrismaBackup,
} from "@prisma/client";

export class RestorePointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RestorePointCountArgs, "select">
  ): Promise<number> {
    return this.prisma.restorePoint.count(args);
  }

  async restorePoints(
    args: Prisma.RestorePointFindManyArgs
  ): Promise<PrismaRestorePoint[]> {
    return this.prisma.restorePoint.findMany(args);
  }
  async restorePoint(
    args: Prisma.RestorePointFindUniqueArgs
  ): Promise<PrismaRestorePoint | null> {
    return this.prisma.restorePoint.findUnique(args);
  }
  async createRestorePoint(
    args: Prisma.RestorePointCreateArgs
  ): Promise<PrismaRestorePoint> {
    return this.prisma.restorePoint.create(args);
  }
  async updateRestorePoint(
    args: Prisma.RestorePointUpdateArgs
  ): Promise<PrismaRestorePoint> {
    return this.prisma.restorePoint.update(args);
  }
  async deleteRestorePoint(
    args: Prisma.RestorePointDeleteArgs
  ): Promise<PrismaRestorePoint> {
    return this.prisma.restorePoint.delete(args);
  }

  async getBackup(parentId: string): Promise<PrismaBackup | null> {
    return this.prisma.restorePoint
      .findUnique({
        where: { id: parentId },
      })
      .backup();
  }
}
