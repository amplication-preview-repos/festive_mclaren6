/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RestorePoint } from "./RestorePoint";
import { RestorePointCountArgs } from "./RestorePointCountArgs";
import { RestorePointFindManyArgs } from "./RestorePointFindManyArgs";
import { Query } from "../../query/base/Query";
import { RestorePointFindUniqueArgs } from "./RestorePointFindUniqueArgs";
import { CreateRestorePointArgs } from "./CreateRestorePointArgs";
import { UpdateRestorePointArgs } from "./UpdateRestorePointArgs";
import { DeleteRestorePointArgs } from "./DeleteRestorePointArgs";
import { Backup } from "../../backup/base/Backup";
import { RestorePointService } from "../restorePoint.service";
@graphql.Resolver(() => RestorePoint)
export class RestorePointResolverBase {
  constructor(protected readonly service: RestorePointService) {}

  async _restorePointsMeta(
    @graphql.Args() args: RestorePointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RestorePoint])
  async restorePoints(
    @graphql.Args() args: RestorePointFindManyArgs
  ): Promise<RestorePoint[]> {
    return this.service.restorePoints(args);
  }

  @graphql.Query(() => RestorePoint, { nullable: true })
  async restorePoint(
    @graphql.Args() args: RestorePointFindUniqueArgs
  ): Promise<RestorePoint | null> {
    const result = await this.service.restorePoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RestorePoint)
  async createRestorePoint(
    @graphql.Args() args: CreateRestorePointArgs
  ): Promise<RestorePoint> {
    return await this.service.createRestorePoint({
      ...args,
      data: {
        ...args.data,

        backup: args.data.backup
          ? {
              connect: args.data.backup,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RestorePoint)
  async updateRestorePoint(
    @graphql.Args() args: UpdateRestorePointArgs
  ): Promise<RestorePoint | null> {
    try {
      return await this.service.updateRestorePoint({
        ...args,
        data: {
          ...args.data,

          backup: args.data.backup
            ? {
                connect: args.data.backup,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestorePoint)
  async deleteRestorePoint(
    @graphql.Args() args: DeleteRestorePointArgs
  ): Promise<RestorePoint | null> {
    try {
      return await this.service.deleteRestorePoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Backup, {
    nullable: true,
    name: "backup",
  })
  async getBackup(
    @graphql.Parent() parent: RestorePoint
  ): Promise<Backup | null> {
    const result = await this.service.getBackup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
