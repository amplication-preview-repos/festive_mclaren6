/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  UserProfile as PrismaUserProfile,
  UserSession as PrismaUserSession,
  UserRole as PrismaUserRole,
  WebSocket as PrismaWebSocket,
  ApiKey as PrismaApiKey,
  Subscription as PrismaSubscription,
  AnalyticsEvent as PrismaAnalyticsEvent,
  AuditLog as PrismaAuditLog,
  Notification as PrismaNotification,
} from "@prisma/client";

export class UserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create(args);
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update(args);
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findUserProfiles(
    parentId: string,
    args: Prisma.UserProfileFindManyArgs
  ): Promise<PrismaUserProfile[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userProfiles(args);
  }

  async findUserSessions(
    parentId: string,
    args: Prisma.UserSessionFindManyArgs
  ): Promise<PrismaUserSession[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userSessions(args);
  }

  async findUserRoles(
    parentId: string,
    args: Prisma.UserRoleFindManyArgs
  ): Promise<PrismaUserRole[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userRoles(args);
  }

  async findWebSockets(
    parentId: string,
    args: Prisma.WebSocketFindManyArgs
  ): Promise<PrismaWebSocket[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .webSockets(args);
  }

  async findApiKeys(
    parentId: string,
    args: Prisma.ApiKeyFindManyArgs
  ): Promise<PrismaApiKey[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .apiKeys(args);
  }

  async findSubscriptions(
    parentId: string,
    args: Prisma.SubscriptionFindManyArgs
  ): Promise<PrismaSubscription[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subscriptions(args);
  }

  async findAnalyticsEvents(
    parentId: string,
    args: Prisma.AnalyticsEventFindManyArgs
  ): Promise<PrismaAnalyticsEvent[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .analyticsEvents(args);
  }

  async findAuditLogs(
    parentId: string,
    args: Prisma.AuditLogFindManyArgs
  ): Promise<PrismaAuditLog[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .auditLogs(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }
}
