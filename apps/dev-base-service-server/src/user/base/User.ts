/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  MaxLength,
  IsOptional,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserSession } from "../../userSession/base/UserSession";
import { UserRole } from "../../userRole/base/UserRole";
import { WebSocket } from "../../webSocket/base/WebSocket";
import { ApiKey } from "../../apiKey/base/ApiKey";
import { Subscription } from "../../subscription/base/Subscription";
import { AnalyticsEvent } from "../../analyticsEvent/base/AnalyticsEvent";
import { AuditLog } from "../../auditLog/base/AuditLog";
import { Notification } from "../../notification/base/Notification";

@ObjectType()
class User {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  roles!: JsonValue;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  lastLogin!: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  profilePicture!: JsonValue;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  twoFactorEnabled!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  preferredLanguage!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  timezone!: string | null;

  @ApiProperty({
    required: false,
    type: () => [UserProfile],
  })
  @ValidateNested()
  @Type(() => UserProfile)
  @IsOptional()
  userProfiles?: Array<UserProfile>;

  @ApiProperty({
    required: false,
    type: () => [UserSession],
  })
  @ValidateNested()
  @Type(() => UserSession)
  @IsOptional()
  userSessions?: Array<UserSession>;

  @ApiProperty({
    required: false,
    type: () => [UserRole],
  })
  @ValidateNested()
  @Type(() => UserRole)
  @IsOptional()
  userRoles?: Array<UserRole>;

  @ApiProperty({
    required: false,
    type: () => [WebSocket],
  })
  @ValidateNested()
  @Type(() => WebSocket)
  @IsOptional()
  webSockets?: Array<WebSocket>;

  @ApiProperty({
    required: false,
    type: () => [ApiKey],
  })
  @ValidateNested()
  @Type(() => ApiKey)
  @IsOptional()
  apiKeys?: Array<ApiKey>;

  @ApiProperty({
    required: false,
    type: () => [Subscription],
  })
  @ValidateNested()
  @Type(() => Subscription)
  @IsOptional()
  subscriptions?: Array<Subscription>;

  @ApiProperty({
    required: false,
    type: () => [AnalyticsEvent],
  })
  @ValidateNested()
  @Type(() => AnalyticsEvent)
  @IsOptional()
  analyticsEvents?: Array<AnalyticsEvent>;

  @ApiProperty({
    required: false,
    type: () => [AuditLog],
  })
  @ValidateNested()
  @Type(() => AuditLog)
  @IsOptional()
  auditLogs?: Array<AuditLog>;

  @ApiProperty({
    required: false,
    type: () => [Notification],
  })
  @ValidateNested()
  @Type(() => Notification)
  @IsOptional()
  notifications?: Array<Notification>;
}

export { User as User };
