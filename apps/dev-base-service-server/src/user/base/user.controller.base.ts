/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { UserProfileFindManyArgs } from "../../userProfile/base/UserProfileFindManyArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserProfileWhereUniqueInput } from "../../userProfile/base/UserProfileWhereUniqueInput";
import { UserSessionFindManyArgs } from "../../userSession/base/UserSessionFindManyArgs";
import { UserSession } from "../../userSession/base/UserSession";
import { UserSessionWhereUniqueInput } from "../../userSession/base/UserSessionWhereUniqueInput";
import { UserRoleFindManyArgs } from "../../userRole/base/UserRoleFindManyArgs";
import { UserRole } from "../../userRole/base/UserRole";
import { UserRoleWhereUniqueInput } from "../../userRole/base/UserRoleWhereUniqueInput";
import { WebSocketFindManyArgs } from "../../webSocket/base/WebSocketFindManyArgs";
import { WebSocket } from "../../webSocket/base/WebSocket";
import { WebSocketWhereUniqueInput } from "../../webSocket/base/WebSocketWhereUniqueInput";
import { ApiKeyFindManyArgs } from "../../apiKey/base/ApiKeyFindManyArgs";
import { ApiKey } from "../../apiKey/base/ApiKey";
import { ApiKeyWhereUniqueInput } from "../../apiKey/base/ApiKeyWhereUniqueInput";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";
import { AnalyticsEventFindManyArgs } from "../../analyticsEvent/base/AnalyticsEventFindManyArgs";
import { AnalyticsEvent } from "../../analyticsEvent/base/AnalyticsEvent";
import { AnalyticsEventWhereUniqueInput } from "../../analyticsEvent/base/AnalyticsEventWhereUniqueInput";
import { AuditLogFindManyArgs } from "../../auditLog/base/AuditLogFindManyArgs";
import { AuditLog } from "../../auditLog/base/AuditLog";
import { AuditLogWhereUniqueInput } from "../../auditLog/base/AuditLogWhereUniqueInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
        phoneNumber: true,
        lastLogin: true,
        isActive: true,
        profilePicture: true,
        twoFactorEnabled: true,
        preferredLanguage: true,
        timezone: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
        phoneNumber: true,
        lastLogin: true,
        isActive: true,
        profilePicture: true,
        twoFactorEnabled: true,
        preferredLanguage: true,
        timezone: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
        phoneNumber: true,
        lastLogin: true,
        isActive: true,
        profilePicture: true,
        twoFactorEnabled: true,
        preferredLanguage: true,
        timezone: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
          phoneNumber: true,
          lastLogin: true,
          isActive: true,
          profilePicture: true,
          twoFactorEnabled: true,
          preferredLanguage: true,
          timezone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
          phoneNumber: true,
          lastLogin: true,
          isActive: true,
          profilePicture: true,
          twoFactorEnabled: true,
          preferredLanguage: true,
          timezone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userProfiles")
  @ApiNestedQuery(UserProfileFindManyArgs)
  async findUserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserProfile[]> {
    const query = plainToClass(UserProfileFindManyArgs, request.query);
    const results = await this.service.findUserProfiles(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        bio: true,
        location: true,
        website: true,
        socialLinks: true,
        skills: true,
        experience: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userProfiles")
  async connectUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userProfiles")
  async updateUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userProfiles")
  async disconnectUserProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userSessions")
  @ApiNestedQuery(UserSessionFindManyArgs)
  async findUserSessions(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserSession[]> {
    const query = plainToClass(UserSessionFindManyArgs, request.query);
    const results = await this.service.findUserSessions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deviceInfo: true,
        token: true,
        ipAddress: true,
        startTime: true,
        endTime: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userSessions")
  async connectUserSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSessions: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userSessions")
  async updateUserSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSessions: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userSessions")
  async disconnectUserSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSessions: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userRoles")
  @ApiNestedQuery(UserRoleFindManyArgs)
  async findUserRoles(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserRole[]> {
    const query = plainToClass(UserRoleFindManyArgs, request.query);
    const results = await this.service.findUserRoles(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        assignedAt: true,
        assignedBy: true,

        user: {
          select: {
            id: true,
          },
        },

        role: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRoles")
  async connectUserRoles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRoles: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRoles")
  async updateUserRoles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRoles: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRoles")
  async disconnectUserRoles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRoles: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/webSockets")
  @ApiNestedQuery(WebSocketFindManyArgs)
  async findWebSockets(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<WebSocket[]> {
    const query = plainToClass(WebSocketFindManyArgs, request.query);
    const results = await this.service.findWebSockets(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        disconnectedAt: true,
        connectionId: true,
        status: true,
        connectedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/webSockets")
  async connectWebSockets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WebSocketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webSockets: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/webSockets")
  async updateWebSockets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WebSocketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webSockets: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/webSockets")
  async disconnectWebSockets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WebSocketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webSockets: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/apiKeys")
  @ApiNestedQuery(ApiKeyFindManyArgs)
  async findApiKeys(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ApiKey[]> {
    const query = plainToClass(ApiKeyFindManyArgs, request.query);
    const results = await this.service.findApiKeys(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        key: true,
        name: true,
        scopes: true,
        expiresAt: true,
        lastUsed: true,
        rateLimit: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apiKeys")
  async connectApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apiKeys")
  async updateApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apiKeys")
  async disconnectApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/subscriptions")
  @ApiNestedQuery(SubscriptionFindManyArgs)
  async findSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Subscription[]> {
    const query = plainToClass(SubscriptionFindManyArgs, request.query);
    const results = await this.service.findSubscriptions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        event: true,

        user: {
          select: {
            id: true,
          },
        },

        collection: {
          select: {
            id: true,
          },
        },

        query: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subscriptions")
  async connectSubscriptions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subscriptions")
  async updateSubscriptions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subscriptions")
  async disconnectSubscriptions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/analyticsEvents")
  @ApiNestedQuery(AnalyticsEventFindManyArgs)
  async findAnalyticsEvents(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<AnalyticsEvent[]> {
    const query = plainToClass(AnalyticsEventFindManyArgs, request.query);
    const results = await this.service.findAnalyticsEvents(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventType: true,
        eventData: true,
        timestamp: true,
        context: true,

        user: {
          select: {
            id: true,
          },
        },

        collection: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/analyticsEvents")
  async connectAnalyticsEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AnalyticsEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsEvents: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/analyticsEvents")
  async updateAnalyticsEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AnalyticsEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsEvents: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/analyticsEvents")
  async disconnectAnalyticsEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AnalyticsEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsEvents: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/auditLogs")
  @ApiNestedQuery(AuditLogFindManyArgs)
  async findAuditLogs(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<AuditLog[]> {
    const query = plainToClass(AuditLogFindManyArgs, request.query);
    const results = await this.service.findAuditLogs(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        actionType: true,
        entityType: true,
        changes: true,
        timestamp: true,
        ipAddress: true,
        entity: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/auditLogs")
  async connectAuditLogs(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AuditLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      auditLogs: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/auditLogs")
  async updateAuditLogs(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AuditLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      auditLogs: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/auditLogs")
  async disconnectAuditLogs(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AuditLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      auditLogs: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  async findNotifications(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        content: true,
        isRead: true,
        createdAtField: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  async connectNotifications(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  async updateNotifications(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  async disconnectNotifications(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
