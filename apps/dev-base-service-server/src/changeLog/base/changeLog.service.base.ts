/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ChangeLog as PrismaChangeLog } from "@prisma/client";

export class ChangeLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChangeLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.changeLog.count(args);
  }

  async changeLogs(
    args: Prisma.ChangeLogFindManyArgs
  ): Promise<PrismaChangeLog[]> {
    return this.prisma.changeLog.findMany(args);
  }
  async changeLog(
    args: Prisma.ChangeLogFindUniqueArgs
  ): Promise<PrismaChangeLog | null> {
    return this.prisma.changeLog.findUnique(args);
  }
  async createChangeLog(
    args: Prisma.ChangeLogCreateArgs
  ): Promise<PrismaChangeLog> {
    return this.prisma.changeLog.create(args);
  }
  async updateChangeLog(
    args: Prisma.ChangeLogUpdateArgs
  ): Promise<PrismaChangeLog> {
    return this.prisma.changeLog.update(args);
  }
  async deleteChangeLog(
    args: Prisma.ChangeLogDeleteArgs
  ): Promise<PrismaChangeLog> {
    return this.prisma.changeLog.delete(args);
  }
}
