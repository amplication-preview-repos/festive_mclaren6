/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChangeLog } from "./ChangeLog";
import { ChangeLogCountArgs } from "./ChangeLogCountArgs";
import { ChangeLogFindManyArgs } from "./ChangeLogFindManyArgs";
import { Query } from "../../query/base/Query";
import { ChangeLogFindUniqueArgs } from "./ChangeLogFindUniqueArgs";
import { CreateChangeLogArgs } from "./CreateChangeLogArgs";
import { UpdateChangeLogArgs } from "./UpdateChangeLogArgs";
import { DeleteChangeLogArgs } from "./DeleteChangeLogArgs";
import { ChangeLogService } from "../changeLog.service";
@graphql.Resolver(() => ChangeLog)
export class ChangeLogResolverBase {
  constructor(protected readonly service: ChangeLogService) {}

  async _changeLogsMeta(
    @graphql.Args() args: ChangeLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChangeLog])
  async changeLogs(
    @graphql.Args() args: ChangeLogFindManyArgs
  ): Promise<ChangeLog[]> {
    return this.service.changeLogs(args);
  }

  @graphql.Query(() => ChangeLog, { nullable: true })
  async changeLog(
    @graphql.Args() args: ChangeLogFindUniqueArgs
  ): Promise<ChangeLog | null> {
    const result = await this.service.changeLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChangeLog)
  async createChangeLog(
    @graphql.Args() args: CreateChangeLogArgs
  ): Promise<ChangeLog> {
    return await this.service.createChangeLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ChangeLog)
  async updateChangeLog(
    @graphql.Args() args: UpdateChangeLogArgs
  ): Promise<ChangeLog | null> {
    try {
      return await this.service.updateChangeLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChangeLog)
  async deleteChangeLog(
    @graphql.Args() args: DeleteChangeLogArgs
  ): Promise<ChangeLog | null> {
    try {
      return await this.service.deleteChangeLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
