/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CloudFunction as PrismaCloudFunction } from "@prisma/client";

export class CloudFunctionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CloudFunctionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cloudFunction.count(args);
  }

  async cloudFunctions(
    args: Prisma.CloudFunctionFindManyArgs
  ): Promise<PrismaCloudFunction[]> {
    return this.prisma.cloudFunction.findMany(args);
  }
  async cloudFunction(
    args: Prisma.CloudFunctionFindUniqueArgs
  ): Promise<PrismaCloudFunction | null> {
    return this.prisma.cloudFunction.findUnique(args);
  }
  async createCloudFunction(
    args: Prisma.CloudFunctionCreateArgs
  ): Promise<PrismaCloudFunction> {
    return this.prisma.cloudFunction.create(args);
  }
  async updateCloudFunction(
    args: Prisma.CloudFunctionUpdateArgs
  ): Promise<PrismaCloudFunction> {
    return this.prisma.cloudFunction.update(args);
  }
  async deleteCloudFunction(
    args: Prisma.CloudFunctionDeleteArgs
  ): Promise<PrismaCloudFunction> {
    return this.prisma.cloudFunction.delete(args);
  }
}
