/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CloudFunctionService } from "../cloudFunction.service";
import { CloudFunctionCreateInput } from "./CloudFunctionCreateInput";
import { CloudFunction } from "./CloudFunction";
import { CloudFunctionFindManyArgs } from "./CloudFunctionFindManyArgs";
import { CloudFunctionWhereUniqueInput } from "./CloudFunctionWhereUniqueInput";
import { CloudFunctionUpdateInput } from "./CloudFunctionUpdateInput";

export class CloudFunctionControllerBase {
  constructor(protected readonly service: CloudFunctionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CloudFunction })
  async createCloudFunction(
    @common.Body() data: CloudFunctionCreateInput
  ): Promise<CloudFunction> {
    return await this.service.createCloudFunction({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        runtime: true,
        trigger: true,
        lastExecuted: true,
        environment: true,
        timeout: true,
        memorySize: true,
        code: true,
        version: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CloudFunction] })
  @ApiNestedQuery(CloudFunctionFindManyArgs)
  async cloudFunctions(
    @common.Req() request: Request
  ): Promise<CloudFunction[]> {
    const args = plainToClass(CloudFunctionFindManyArgs, request.query);
    return this.service.cloudFunctions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        runtime: true,
        trigger: true,
        lastExecuted: true,
        environment: true,
        timeout: true,
        memorySize: true,
        code: true,
        version: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CloudFunction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cloudFunction(
    @common.Param() params: CloudFunctionWhereUniqueInput
  ): Promise<CloudFunction | null> {
    const result = await this.service.cloudFunction({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        runtime: true,
        trigger: true,
        lastExecuted: true,
        environment: true,
        timeout: true,
        memorySize: true,
        code: true,
        version: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CloudFunction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCloudFunction(
    @common.Param() params: CloudFunctionWhereUniqueInput,
    @common.Body() data: CloudFunctionUpdateInput
  ): Promise<CloudFunction | null> {
    try {
      return await this.service.updateCloudFunction({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          runtime: true,
          trigger: true,
          lastExecuted: true,
          environment: true,
          timeout: true,
          memorySize: true,
          code: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CloudFunction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCloudFunction(
    @common.Param() params: CloudFunctionWhereUniqueInput
  ): Promise<CloudFunction | null> {
    try {
      return await this.service.deleteCloudFunction({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          runtime: true,
          trigger: true,
          lastExecuted: true,
          environment: true,
          timeout: true,
          memorySize: true,
          code: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
