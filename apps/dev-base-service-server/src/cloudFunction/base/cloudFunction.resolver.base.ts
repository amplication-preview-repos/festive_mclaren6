/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CloudFunction } from "./CloudFunction";
import { CloudFunctionCountArgs } from "./CloudFunctionCountArgs";
import { CloudFunctionFindManyArgs } from "./CloudFunctionFindManyArgs";
import { Query } from "../../query/base/Query";
import { CloudFunctionFindUniqueArgs } from "./CloudFunctionFindUniqueArgs";
import { CreateCloudFunctionArgs } from "./CreateCloudFunctionArgs";
import { UpdateCloudFunctionArgs } from "./UpdateCloudFunctionArgs";
import { DeleteCloudFunctionArgs } from "./DeleteCloudFunctionArgs";
import { CloudFunctionService } from "../cloudFunction.service";
@graphql.Resolver(() => CloudFunction)
export class CloudFunctionResolverBase {
  constructor(protected readonly service: CloudFunctionService) {}

  async _cloudFunctionsMeta(
    @graphql.Args() args: CloudFunctionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CloudFunction])
  async cloudFunctions(
    @graphql.Args() args: CloudFunctionFindManyArgs
  ): Promise<CloudFunction[]> {
    return this.service.cloudFunctions(args);
  }

  @graphql.Query(() => CloudFunction, { nullable: true })
  async cloudFunction(
    @graphql.Args() args: CloudFunctionFindUniqueArgs
  ): Promise<CloudFunction | null> {
    const result = await this.service.cloudFunction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CloudFunction)
  async createCloudFunction(
    @graphql.Args() args: CreateCloudFunctionArgs
  ): Promise<CloudFunction> {
    return await this.service.createCloudFunction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CloudFunction)
  async updateCloudFunction(
    @graphql.Args() args: UpdateCloudFunctionArgs
  ): Promise<CloudFunction | null> {
    try {
      return await this.service.updateCloudFunction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CloudFunction)
  async deleteCloudFunction(
    @graphql.Args() args: DeleteCloudFunctionArgs
  ): Promise<CloudFunction | null> {
    try {
      return await this.service.deleteCloudFunction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
