/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserSessionService } from "../userSession.service";
import { UserSessionCreateInput } from "./UserSessionCreateInput";
import { UserSession } from "./UserSession";
import { UserSessionFindManyArgs } from "./UserSessionFindManyArgs";
import { UserSessionWhereUniqueInput } from "./UserSessionWhereUniqueInput";
import { UserSessionUpdateInput } from "./UserSessionUpdateInput";

export class UserSessionControllerBase {
  constructor(protected readonly service: UserSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserSession })
  async createUserSession(
    @common.Body() data: UserSessionCreateInput
  ): Promise<UserSession> {
    return await this.service.createUserSession({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deviceInfo: true,
        token: true,
        ipAddress: true,
        startTime: true,
        endTime: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserSession] })
  @ApiNestedQuery(UserSessionFindManyArgs)
  async userSessions(@common.Req() request: Request): Promise<UserSession[]> {
    const args = plainToClass(UserSessionFindManyArgs, request.query);
    return this.service.userSessions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deviceInfo: true,
        token: true,
        ipAddress: true,
        startTime: true,
        endTime: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userSession(
    @common.Param() params: UserSessionWhereUniqueInput
  ): Promise<UserSession | null> {
    const result = await this.service.userSession({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deviceInfo: true,
        token: true,
        ipAddress: true,
        startTime: true,
        endTime: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserSession(
    @common.Param() params: UserSessionWhereUniqueInput,
    @common.Body() data: UserSessionUpdateInput
  ): Promise<UserSession | null> {
    try {
      return await this.service.updateUserSession({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          deviceInfo: true,
          token: true,
          ipAddress: true,
          startTime: true,
          endTime: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserSession(
    @common.Param() params: UserSessionWhereUniqueInput
  ): Promise<UserSession | null> {
    try {
      return await this.service.deleteUserSession({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          deviceInfo: true,
          token: true,
          ipAddress: true,
          startTime: true,
          endTime: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
