/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserSession as PrismaUserSession,
  User as PrismaUser,
} from "@prisma/client";

export class UserSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userSession.count(args);
  }

  async userSessions(
    args: Prisma.UserSessionFindManyArgs
  ): Promise<PrismaUserSession[]> {
    return this.prisma.userSession.findMany(args);
  }
  async userSession(
    args: Prisma.UserSessionFindUniqueArgs
  ): Promise<PrismaUserSession | null> {
    return this.prisma.userSession.findUnique(args);
  }
  async createUserSession(
    args: Prisma.UserSessionCreateArgs
  ): Promise<PrismaUserSession> {
    return this.prisma.userSession.create(args);
  }
  async updateUserSession(
    args: Prisma.UserSessionUpdateArgs
  ): Promise<PrismaUserSession> {
    return this.prisma.userSession.update(args);
  }
  async deleteUserSession(
    args: Prisma.UserSessionDeleteArgs
  ): Promise<PrismaUserSession> {
    return this.prisma.userSession.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userSession
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
