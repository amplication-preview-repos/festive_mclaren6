/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserSession } from "./UserSession";
import { UserSessionCountArgs } from "./UserSessionCountArgs";
import { UserSessionFindManyArgs } from "./UserSessionFindManyArgs";
import { Query } from "../../query/base/Query";
import { UserSessionFindUniqueArgs } from "./UserSessionFindUniqueArgs";
import { CreateUserSessionArgs } from "./CreateUserSessionArgs";
import { UpdateUserSessionArgs } from "./UpdateUserSessionArgs";
import { DeleteUserSessionArgs } from "./DeleteUserSessionArgs";
import { User } from "../../user/base/User";
import { UserSessionService } from "../userSession.service";
@graphql.Resolver(() => UserSession)
export class UserSessionResolverBase {
  constructor(protected readonly service: UserSessionService) {}

  async _userSessionsMeta(
    @graphql.Args() args: UserSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserSession])
  async userSessions(
    @graphql.Args() args: UserSessionFindManyArgs
  ): Promise<UserSession[]> {
    return this.service.userSessions(args);
  }

  @graphql.Query(() => UserSession, { nullable: true })
  async userSession(
    @graphql.Args() args: UserSessionFindUniqueArgs
  ): Promise<UserSession | null> {
    const result = await this.service.userSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserSession)
  async createUserSession(
    @graphql.Args() args: CreateUserSessionArgs
  ): Promise<UserSession> {
    return await this.service.createUserSession({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserSession)
  async updateUserSession(
    @graphql.Args() args: UpdateUserSessionArgs
  ): Promise<UserSession | null> {
    try {
      return await this.service.updateUserSession({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserSession)
  async deleteUserSession(
    @graphql.Args() args: DeleteUserSessionArgs
  ): Promise<UserSession | null> {
    try {
      return await this.service.deleteUserSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UserSession): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
