/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Cache as PrismaCache } from "@prisma/client";

export class CacheServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CacheCountArgs, "select">): Promise<number> {
    return this.prisma.cache.count(args);
  }

  async caches(args: Prisma.CacheFindManyArgs): Promise<PrismaCache[]> {
    return this.prisma.cache.findMany(args);
  }
  async cache(args: Prisma.CacheFindUniqueArgs): Promise<PrismaCache | null> {
    return this.prisma.cache.findUnique(args);
  }
  async createCache(args: Prisma.CacheCreateArgs): Promise<PrismaCache> {
    return this.prisma.cache.create(args);
  }
  async updateCache(args: Prisma.CacheUpdateArgs): Promise<PrismaCache> {
    return this.prisma.cache.update(args);
  }
  async deleteCache(args: Prisma.CacheDeleteArgs): Promise<PrismaCache> {
    return this.prisma.cache.delete(args);
  }
}
