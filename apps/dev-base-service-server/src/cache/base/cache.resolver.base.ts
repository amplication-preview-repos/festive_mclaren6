/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Cache } from "./Cache";
import { CacheCountArgs } from "./CacheCountArgs";
import { CacheFindManyArgs } from "./CacheFindManyArgs";
import { Query } from "../../query/base/Query";
import { CacheFindUniqueArgs } from "./CacheFindUniqueArgs";
import { CreateCacheArgs } from "./CreateCacheArgs";
import { UpdateCacheArgs } from "./UpdateCacheArgs";
import { DeleteCacheArgs } from "./DeleteCacheArgs";
import { CacheService } from "../cache.service";
@graphql.Resolver(() => Cache)
export class CacheResolverBase {
  constructor(protected readonly service: CacheService) {}

  async _cachesMeta(
    @graphql.Args() args: CacheCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cache])
  async caches(@graphql.Args() args: CacheFindManyArgs): Promise<Cache[]> {
    return this.service.caches(args);
  }

  @graphql.Query(() => Cache, { nullable: true })
  async cache(
    @graphql.Args() args: CacheFindUniqueArgs
  ): Promise<Cache | null> {
    const result = await this.service.cache(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cache)
  async createCache(@graphql.Args() args: CreateCacheArgs): Promise<Cache> {
    return await this.service.createCache({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Cache)
  async updateCache(
    @graphql.Args() args: UpdateCacheArgs
  ): Promise<Cache | null> {
    try {
      return await this.service.updateCache({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cache)
  async deleteCache(
    @graphql.Args() args: DeleteCacheArgs
  ): Promise<Cache | null> {
    try {
      return await this.service.deleteCache(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
