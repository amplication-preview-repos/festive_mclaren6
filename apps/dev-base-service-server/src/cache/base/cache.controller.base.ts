/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CacheService } from "../cache.service";
import { CacheCreateInput } from "./CacheCreateInput";
import { Cache } from "./Cache";
import { CacheFindManyArgs } from "./CacheFindManyArgs";
import { CacheWhereUniqueInput } from "./CacheWhereUniqueInput";
import { CacheUpdateInput } from "./CacheUpdateInput";

export class CacheControllerBase {
  constructor(protected readonly service: CacheService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cache })
  async createCache(@common.Body() data: CacheCreateInput): Promise<Cache> {
    return await this.service.createCache({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        key: true,
        value: true,
        ttl: true,
        lastAccessed: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cache] })
  @ApiNestedQuery(CacheFindManyArgs)
  async caches(@common.Req() request: Request): Promise<Cache[]> {
    const args = plainToClass(CacheFindManyArgs, request.query);
    return this.service.caches({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        key: true,
        value: true,
        ttl: true,
        lastAccessed: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cache(
    @common.Param() params: CacheWhereUniqueInput
  ): Promise<Cache | null> {
    const result = await this.service.cache({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        key: true,
        value: true,
        ttl: true,
        lastAccessed: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCache(
    @common.Param() params: CacheWhereUniqueInput,
    @common.Body() data: CacheUpdateInput
  ): Promise<Cache | null> {
    try {
      return await this.service.updateCache({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          key: true,
          value: true,
          ttl: true,
          lastAccessed: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCache(
    @common.Param() params: CacheWhereUniqueInput
  ): Promise<Cache | null> {
    try {
      return await this.service.deleteCache({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          key: true,
          value: true,
          ttl: true,
          lastAccessed: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
