/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccessControl as PrismaAccessControl,
  Role as PrismaRole,
} from "@prisma/client";

export class AccessControlServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessControlCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessControl.count(args);
  }

  async accessControls(
    args: Prisma.AccessControlFindManyArgs
  ): Promise<PrismaAccessControl[]> {
    return this.prisma.accessControl.findMany(args);
  }
  async accessControl(
    args: Prisma.AccessControlFindUniqueArgs
  ): Promise<PrismaAccessControl | null> {
    return this.prisma.accessControl.findUnique(args);
  }
  async createAccessControl(
    args: Prisma.AccessControlCreateArgs
  ): Promise<PrismaAccessControl> {
    return this.prisma.accessControl.create(args);
  }
  async updateAccessControl(
    args: Prisma.AccessControlUpdateArgs
  ): Promise<PrismaAccessControl> {
    return this.prisma.accessControl.update(args);
  }
  async deleteAccessControl(
    args: Prisma.AccessControlDeleteArgs
  ): Promise<PrismaAccessControl> {
    return this.prisma.accessControl.delete(args);
  }

  async getRole(parentId: string): Promise<PrismaRole | null> {
    return this.prisma.accessControl
      .findUnique({
        where: { id: parentId },
      })
      .role();
  }
}
