/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccessControl } from "./AccessControl";
import { AccessControlCountArgs } from "./AccessControlCountArgs";
import { AccessControlFindManyArgs } from "./AccessControlFindManyArgs";
import { Query } from "../../query/base/Query";
import { AccessControlFindUniqueArgs } from "./AccessControlFindUniqueArgs";
import { CreateAccessControlArgs } from "./CreateAccessControlArgs";
import { UpdateAccessControlArgs } from "./UpdateAccessControlArgs";
import { DeleteAccessControlArgs } from "./DeleteAccessControlArgs";
import { Role } from "../../role/base/Role";
import { AccessControlService } from "../accessControl.service";
@graphql.Resolver(() => AccessControl)
export class AccessControlResolverBase {
  constructor(protected readonly service: AccessControlService) {}

  async _accessControlsMeta(
    @graphql.Args() args: AccessControlCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccessControl])
  async accessControls(
    @graphql.Args() args: AccessControlFindManyArgs
  ): Promise<AccessControl[]> {
    return this.service.accessControls(args);
  }

  @graphql.Query(() => AccessControl, { nullable: true })
  async accessControl(
    @graphql.Args() args: AccessControlFindUniqueArgs
  ): Promise<AccessControl | null> {
    const result = await this.service.accessControl(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccessControl)
  async createAccessControl(
    @graphql.Args() args: CreateAccessControlArgs
  ): Promise<AccessControl> {
    return await this.service.createAccessControl({
      ...args,
      data: {
        ...args.data,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AccessControl)
  async updateAccessControl(
    @graphql.Args() args: UpdateAccessControlArgs
  ): Promise<AccessControl | null> {
    try {
      return await this.service.updateAccessControl({
        ...args,
        data: {
          ...args.data,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccessControl)
  async deleteAccessControl(
    @graphql.Args() args: DeleteAccessControlArgs
  ): Promise<AccessControl | null> {
    try {
      return await this.service.deleteAccessControl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  async getRole(@graphql.Parent() parent: AccessControl): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
