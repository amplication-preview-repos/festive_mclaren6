/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QueryCache as PrismaQueryCache,
  Query as PrismaQuery,
} from "@prisma/client";

export class QueryCacheServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QueryCacheCountArgs, "select">
  ): Promise<number> {
    return this.prisma.queryCache.count(args);
  }

  async queryCaches(
    args: Prisma.QueryCacheFindManyArgs
  ): Promise<PrismaQueryCache[]> {
    return this.prisma.queryCache.findMany(args);
  }
  async queryCache(
    args: Prisma.QueryCacheFindUniqueArgs
  ): Promise<PrismaQueryCache | null> {
    return this.prisma.queryCache.findUnique(args);
  }
  async createQueryCache(
    args: Prisma.QueryCacheCreateArgs
  ): Promise<PrismaQueryCache> {
    return this.prisma.queryCache.create(args);
  }
  async updateQueryCache(
    args: Prisma.QueryCacheUpdateArgs
  ): Promise<PrismaQueryCache> {
    return this.prisma.queryCache.update(args);
  }
  async deleteQueryCache(
    args: Prisma.QueryCacheDeleteArgs
  ): Promise<PrismaQueryCache> {
    return this.prisma.queryCache.delete(args);
  }

  async getQuery(parentId: string): Promise<PrismaQuery | null> {
    return this.prisma.queryCache
      .findUnique({
        where: { id: parentId },
      })
      .query();
  }
}
