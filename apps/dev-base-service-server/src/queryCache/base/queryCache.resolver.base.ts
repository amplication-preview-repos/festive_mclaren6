/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QueryCache } from "./QueryCache";
import { QueryCacheCountArgs } from "./QueryCacheCountArgs";
import { QueryCacheFindManyArgs } from "./QueryCacheFindManyArgs";
import { Query } from "../../query/base/Query";
import { QueryCacheFindUniqueArgs } from "./QueryCacheFindUniqueArgs";
import { CreateQueryCacheArgs } from "./CreateQueryCacheArgs";
import { UpdateQueryCacheArgs } from "./UpdateQueryCacheArgs";
import { DeleteQueryCacheArgs } from "./DeleteQueryCacheArgs";
import { QueryCacheService } from "../queryCache.service";
@graphql.Resolver(() => QueryCache)
export class QueryCacheResolverBase {
  constructor(protected readonly service: QueryCacheService) {}

  async _queryCachesMeta(
    @graphql.Args() args: QueryCacheCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QueryCache])
  async queryCaches(
    @graphql.Args() args: QueryCacheFindManyArgs
  ): Promise<QueryCache[]> {
    return this.service.queryCaches(args);
  }

  @graphql.Query(() => QueryCache, { nullable: true })
  async queryCache(
    @graphql.Args() args: QueryCacheFindUniqueArgs
  ): Promise<QueryCache | null> {
    const result = await this.service.queryCache(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QueryCache)
  async createQueryCache(
    @graphql.Args() args: CreateQueryCacheArgs
  ): Promise<QueryCache> {
    return await this.service.createQueryCache({
      ...args,
      data: {
        ...args.data,

        query: args.data.query
          ? {
              connect: args.data.query,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => QueryCache)
  async updateQueryCache(
    @graphql.Args() args: UpdateQueryCacheArgs
  ): Promise<QueryCache | null> {
    try {
      return await this.service.updateQueryCache({
        ...args,
        data: {
          ...args.data,

          query: args.data.query
            ? {
                connect: args.data.query,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueryCache)
  async deleteQueryCache(
    @graphql.Args() args: DeleteQueryCacheArgs
  ): Promise<QueryCache | null> {
    try {
      return await this.service.deleteQueryCache(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Query, {
    nullable: true,
    name: "query",
  })
  async getQuery(@graphql.Parent() parent: QueryCache): Promise<Query | null> {
    const result = await this.service.getQuery(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
