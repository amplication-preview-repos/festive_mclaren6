/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueryCacheService } from "../queryCache.service";
import { QueryCacheCreateInput } from "./QueryCacheCreateInput";
import { QueryCache } from "./QueryCache";
import { QueryCacheFindManyArgs } from "./QueryCacheFindManyArgs";
import { QueryCacheWhereUniqueInput } from "./QueryCacheWhereUniqueInput";
import { QueryCacheUpdateInput } from "./QueryCacheUpdateInput";

export class QueryCacheControllerBase {
  constructor(protected readonly service: QueryCacheService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QueryCache })
  async createQueryCache(
    @common.Body() data: QueryCacheCreateInput
  ): Promise<QueryCache> {
    return await this.service.createQueryCache({
      data: {
        ...data,

        query: data.query
          ? {
              connect: data.query,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        expiresAt: true,

        query: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QueryCache] })
  @ApiNestedQuery(QueryCacheFindManyArgs)
  async queryCaches(@common.Req() request: Request): Promise<QueryCache[]> {
    const args = plainToClass(QueryCacheFindManyArgs, request.query);
    return this.service.queryCaches({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        expiresAt: true,

        query: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QueryCache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queryCache(
    @common.Param() params: QueryCacheWhereUniqueInput
  ): Promise<QueryCache | null> {
    const result = await this.service.queryCache({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        expiresAt: true,

        query: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QueryCache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueryCache(
    @common.Param() params: QueryCacheWhereUniqueInput,
    @common.Body() data: QueryCacheUpdateInput
  ): Promise<QueryCache | null> {
    try {
      return await this.service.updateQueryCache({
        where: params,
        data: {
          ...data,

          query: data.query
            ? {
                connect: data.query,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          result: true,
          expiresAt: true,

          query: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QueryCache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueryCache(
    @common.Param() params: QueryCacheWhereUniqueInput
  ): Promise<QueryCache | null> {
    try {
      return await this.service.deleteQueryCache({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          result: true,
          expiresAt: true,

          query: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
