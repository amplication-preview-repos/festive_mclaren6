/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BackupScheduleService } from "../backupSchedule.service";
import { BackupScheduleCreateInput } from "./BackupScheduleCreateInput";
import { BackupSchedule } from "./BackupSchedule";
import { BackupScheduleFindManyArgs } from "./BackupScheduleFindManyArgs";
import { BackupScheduleWhereUniqueInput } from "./BackupScheduleWhereUniqueInput";
import { BackupScheduleUpdateInput } from "./BackupScheduleUpdateInput";

export class BackupScheduleControllerBase {
  constructor(protected readonly service: BackupScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BackupSchedule })
  async createBackupSchedule(
    @common.Body() data: BackupScheduleCreateInput
  ): Promise<BackupSchedule> {
    return await this.service.createBackupSchedule({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nextBackup: true,
        configField: true,
        frequency: true,
        lastBackup: true,
        retention: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BackupSchedule] })
  @ApiNestedQuery(BackupScheduleFindManyArgs)
  async backupSchedules(
    @common.Req() request: Request
  ): Promise<BackupSchedule[]> {
    const args = plainToClass(BackupScheduleFindManyArgs, request.query);
    return this.service.backupSchedules({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nextBackup: true,
        configField: true,
        frequency: true,
        lastBackup: true,
        retention: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BackupSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async backupSchedule(
    @common.Param() params: BackupScheduleWhereUniqueInput
  ): Promise<BackupSchedule | null> {
    const result = await this.service.backupSchedule({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nextBackup: true,
        configField: true,
        frequency: true,
        lastBackup: true,
        retention: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BackupSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBackupSchedule(
    @common.Param() params: BackupScheduleWhereUniqueInput,
    @common.Body() data: BackupScheduleUpdateInput
  ): Promise<BackupSchedule | null> {
    try {
      return await this.service.updateBackupSchedule({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nextBackup: true,
          configField: true,
          frequency: true,
          lastBackup: true,
          retention: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BackupSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBackupSchedule(
    @common.Param() params: BackupScheduleWhereUniqueInput
  ): Promise<BackupSchedule | null> {
    try {
      return await this.service.deleteBackupSchedule({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nextBackup: true,
          configField: true,
          frequency: true,
          lastBackup: true,
          retention: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
