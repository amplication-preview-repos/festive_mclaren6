/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BackupSchedule } from "./BackupSchedule";
import { BackupScheduleCountArgs } from "./BackupScheduleCountArgs";
import { BackupScheduleFindManyArgs } from "./BackupScheduleFindManyArgs";
import { Query } from "../../query/base/Query";
import { BackupScheduleFindUniqueArgs } from "./BackupScheduleFindUniqueArgs";
import { CreateBackupScheduleArgs } from "./CreateBackupScheduleArgs";
import { UpdateBackupScheduleArgs } from "./UpdateBackupScheduleArgs";
import { DeleteBackupScheduleArgs } from "./DeleteBackupScheduleArgs";
import { BackupScheduleService } from "../backupSchedule.service";
@graphql.Resolver(() => BackupSchedule)
export class BackupScheduleResolverBase {
  constructor(protected readonly service: BackupScheduleService) {}

  async _backupSchedulesMeta(
    @graphql.Args() args: BackupScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BackupSchedule])
  async backupSchedules(
    @graphql.Args() args: BackupScheduleFindManyArgs
  ): Promise<BackupSchedule[]> {
    return this.service.backupSchedules(args);
  }

  @graphql.Query(() => BackupSchedule, { nullable: true })
  async backupSchedule(
    @graphql.Args() args: BackupScheduleFindUniqueArgs
  ): Promise<BackupSchedule | null> {
    const result = await this.service.backupSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BackupSchedule)
  async createBackupSchedule(
    @graphql.Args() args: CreateBackupScheduleArgs
  ): Promise<BackupSchedule> {
    return await this.service.createBackupSchedule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BackupSchedule)
  async updateBackupSchedule(
    @graphql.Args() args: UpdateBackupScheduleArgs
  ): Promise<BackupSchedule | null> {
    try {
      return await this.service.updateBackupSchedule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BackupSchedule)
  async deleteBackupSchedule(
    @graphql.Args() args: DeleteBackupScheduleArgs
  ): Promise<BackupSchedule | null> {
    try {
      return await this.service.deleteBackupSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
